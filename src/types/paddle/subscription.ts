// Generated by https://app.quicktype.io/

interface Subscription {
  /**
   * The unique identifier for this Paddle webhook alert. Integer value sent as a string.
   */
  alert_id?: string;
  alert_name?: string;

  /**
   * This is the unique Subscription ID for this customer’s subscription. You should store
   * this with the customer in your database, as it is needed for making API calls.
   */
  subscription_id?: string;

  /**
   * The ID of the Subscription Plan the customer is subscribed to. (This is the value that
   * will change upon plan change).
   */
  subscription_plan_id?: string;

  /**
   * The checkout id of the order created.
   */
  checkout_id?: string;

  /**
   * The three-letter ISO currency code. Eg: `USD`, `GBP`. See [Supported
   * Currencies](/reference/platform-parameters/supported-currencies).
   */
  currency?: string;

  /**
   * This field contains any values that you passed into the checkout using the `passthrough`
   * parameter. See the [Pass Parameters
   * documentation](/guides/how-tos/checkout/pass-parameters#sending-additional-user-data) for
   * more information.
   */
  passthrough?: string;

  /**
   * The email address of the customer.
   */
  email?: string;

  /**
   * The value of this field `0` or `1` indicates whether the user has agreed to receive
   * marketing messages from the vendor.
   */
  marketing_consent?: number;

  /**
   * The date and time the event was triggered in UTC (Coordinated Universal Time).
   */
  event_time?: Date;

  /**
   * This is the current status of the subscription. A list of possible values and their
   * meanings can be found under [Event
   * Statuses](/reference/platform-parameters/event-statuses).
   */
  status?: Status;
  /**
   * This field contains an encrypted token that you can use to verify the request
   * authenticity. See [Verifying Webhooks](/webhook-reference/verifying-webhooks).
   */
  p_signature?: string;

  /**
   * The customer user id.
   */
  user_id?: string;
}

interface Cancellable {
  /**
 * A URL of the 'Cancel Subscription' page. [See this
 * documentation](/guides/how-tos/subscriptions/cancel-and-pause#cancel-subscription-url) on
 * cancelation URLs. You should store this URL along with the subscribed customer in your
 * database.
 */
  cancel_url?: string;
}

interface Updatable {
  /**
 * A URL of the ‘Update Payment Details’ page. [See this
 * documentation](/guides/how-tos/subscriptions/update-payment-details#update-payment-details-url)
 * on update URLs. You should store this URL along with the subscribed customer in your
 * database.
 */
  update_url?: string;
}

/**
 * Identify this event with the HTTP POST parameter `alert_name` with a value of
 * `subscription_created`
 */
export interface SubscriptionCreated extends Subscription, Cancellable, Updatable {
  /**
   * The date the next payment is due on this subscription.
   */
  next_bill_date?: Date;

  /**
   * The number of products or subscription seats sold in the transaction.
   */
  quantity?: string;
  /**
   * Referrer website URL(s) from where the traffic originated from.
   */
  source?: string;

  /**
   * The price per unit of the subscription.
   */
  unit_price?: string;
}

/**
 * Identify this event with the HTTP POST parameter `alert_name` with a value of
 * `subscription_updated`
 */
export interface SubscriptionUpdated extends Subscription, Cancellable, Updatable {
  /**
   * The new total recurring price of the subscription. Please note that this will only be
   * returned if the subscription has quantity enabled. Decimal sent as a string.
   */
  new_price?: string;
  /**
   * The new quantity applied to a quantity enabled subscription. Please note that this will
   * only be returned if the subscription has quantity enabled.
   */
  new_quantity?: string;
  /**
   * The new price per unit of the subscription. Please note that this will only be returned
   * if the subscription has quantity enabled. Decimal sent as a string.
   */
  new_unit_price?: string;
  /**
   * The date the next payment is due on this subscription.
   */
  next_bill_date?: Date;
  /**
   * The next bill date before the subscription was updated.
   */
  old_next_bill_date?: Date;
  /**
   * The previous total recurring price of the subscription. Decimal sent as a string.
   */
  old_price?: string;
  /**
   * The previous quantity applied to the subscription. Please note that this will only be
   * returned if the subscription has quantity enabled.
   */
  old_quantity?: string;
  /**
   * The subscription status before the subscription was updated. A list of possible values
   * and their meanings can be found under [Event
   * Statuses](/reference/platform-parameters/event-statuses).
   */
  old_status?: Status;
  /**
   * The ID of the subscription plan before the subscription was updated.
   */
  old_subscription_plan_id?: string;
  /**
   * The previous price per unit of the subscription. Please note that this will only be
   * returned if the subscription has quantity enabled. Decimal sent as a string.
   */
  old_unit_price?: string;

  /**
   * The date and time when the subscription was requested to be paused. The subscription will
   * be paused on the `paused_from` date.
   */
  paused_at?: Date;
  /**
   * The date when the subscription payment is paused. The customer should be able to use the
   * service they’ve subscribed to up until this date.
   */
  paused_from?: Date;
  /**
   * The reason why the subscription was paused. For example, `delinquent` if the payment
   * failed and the rule specified in the [recover
   * settings](https://vendors.paddle.com/recover-settings) was to pause the subscription.
   */
  paused_reason?: PausedReason;

}

/**
 * Identify this event with the HTTP POST parameter `alert_name` with a value of
 * `subscription_cancelled`
 */
export interface SubscriptionCancelled extends Subscription {
  /**
   * The date the cancellation should come into effect, taking the customer’s most recent
   * payment into account. The customer should be able to use the service they've subscribed
   * to up until this date.
   */
  cancellation_effective_date?: Date;

  /**
   * The number of products or subscription seats sold in the transaction.
   */
  quantity?: string;

  /**
   * The price per unit of the subscription.
   */
  unit_price?: string;

}

/**
 * Identify this event with the HTTP POST parameter `alert_name` with a value of
 * `subscription_payment_succeeded`
 */
export interface SubscriptionPaymentSucceeded extends Subscription {
  /**
   * The three letter ISO currency code of the vendor’s default currency at the time of the
   * transaction. Eg: `USD`, `GBP`.
   */
  balance_currency?: string;
  /**
   * The amount of revenue added to the vendor’s balance as a result of this payment, in the
   * vendor’s `balance_currency` at the time of the transaction.
   */
  balance_earnings?: string;
  /**
   * The fee amount taken from the vendor, in the vendor’s `balance_currency` at the time of
   * the transaction.
   */
  balance_fee?: string;
  /**
   * The total amount received from the customer as a result of the payment, in the vendor’s
   * `balance_currency` at the time of the transaction.
   */
  balance_gross?: string;
  /**
   * The amount of tax received from the customer, in the vendor’s `balance_currency` at the
   * time of the transaction.
   */
  balance_tax?: string;

  /**
   * The two-letter ISO country code of the customer. Eg: `US`, `GB`. See [Supported
   * Countries](/reference/platform-parameters/supported-countries).
   */
  country?: string;
  /**
   * The coupon code that was used on this order
   */
  coupon?: string;
  /**
   * The name of the customer. For card payments, this will return the cardholder name entered
   * by the buyer during the checkout. For PayPal payments, this will return the name from the
   * PayPal account used during the checkout. For all other payment methods where the name is
   * not collected (including Apple Pay and Wire Transfer), this will be empty.
   */
  customer_name?: string;
  /**
   * The total amount (after taxes and fees) you earned from this payment.
   */
  earnings?: string;


  /**
   * The total amount in Paddle fees for this payment.
   */
  fee?: string;
  /**
   * The value of this field `0` or `1` indicates whether it is the customer’s first payment
   * for this subscription.
   */
  initial_payment?: number;
  /**
   * Number of payments made to date, starting from `1` for the customer's first payment.
   * Integer sent as string.
   */
  instalments?: string;
  /**
   * The date the next payment is due on this subscription.
   */
  next_bill_date?: Date;
  /**
   * The total amount that the customer will be charged for on their upcoming payment, in the
   * subscription’s currency.
   */
  next_payment_amount?: string;
  /**
   * The Paddle Order ID for this payment. This can be used to look up the order within your
   * Seller Dashboard.
   */
  order_id?: string;

  /**
   * Payment method used to make the transaction.
   */
  payment_method?: SubscriptionPaymentMethod;
  /**
   * Amount of tax paid as a result of this payment.
   */
  payment_tax?: string;
  /**
   * Subscription plan name.
   */
  plan_name?: string;
  /**
   * The number of products or subscription seats sold in the transaction.
   */
  quantity?: string;
  /**
   * URL containing the customer receipt.
   */
  receipt_url?: string;
  /**
   * The total amount the customer was charged for this payment. Decimal sent as string.
   */
  sale_gross?: string;

  /**
   * The unique ID of the subscription payment.
   */
  subscription_payment_id?: string;
  /**
   * The price per unit of the subscription.
   */
  unit_price?: string;

}

/**
* Payment method used to make the transaction.
*/
export enum SubscriptionPaymentMethod {
  Card = "card",
  Paypal = "paypal",
}

/**
 * Identify this event with the HTTP POST parameter `alert_name` with a value of
 * `subscription_payment_failed`
 */
export interface SubscriptionPaymentFailed extends Subscription, Cancellable, Updatable {
  /**
   * The amount that we tried to charge for this payment. Decimal value sent as a string.
   */
  amount?: string;
  /**
   * Number of failed payment attempts made so far for this instalment. This number will reset
   * back to 1 if the “Reset Attempts” button in the subscription management page is clicked.
   */
  attempt_number?: string;



  /**
   * Number of payments made to date, starting from `1` for the customer's first payment.
   * Integer sent as string.
   */
  instalments?: string;
  /**
   * The date that we will next try to process this failed payment.
   */
  next_retry_date?: Date;
  /**
   * The Paddle Order ID for this payment. This can be used to look up the order within your
   * Seller Dashboard.
   */
  order_id?: string;

  /**
   * The number of products or subscription seats sold in the transaction.
   */
  quantity?: string;

  /**
   * The unique ID of the subscription payment.
   */
  subscription_payment_id?: string;
  /**
   * The price per unit of the subscription.
   */
  unit_price?: string;
}

/**
 * Identify this event with the HTTP POST parameter `alert_name` with a value of
 * `subscription_payment_refunded`
 */
export interface SubscriptionPaymentRefunded extends Subscription {
  /**
   * The amount refunded, partial refunds are possible. Decimal value sent as a string.
   */
  amount?: string;
  /**
   * The three letter ISO currency code of the vendor’s default currency at the time of the
   * transaction. Eg: `USD`, `GBP`.
   */
  balance_currency?: string;
  /**
   * The amount of revenue taken from the vendor’s balance as a result of this refund, in the
   * vendor’s `balance_currency` at the time of the transaction. It returns a positive or
   * negative value. Eg: If you issue a VAT-only refund, this will increase the vendor’s
   * earnings instead of decreasing it, to reflect this we use a negative value. Please also
   * note that if the earnings of the order being refunded are being split between vendors,
   * the earnings decrease amount will not include the other vendor’s fee, only yours. (eg. If
   * you are giving 15% of your earnings to another vendor and keeping 85%, your balance
   * earnings will be reduced only by 85%).
   */
  balance_earnings_decrease?: string;
  /**
   * The fee amount returned to the vendor, in the vendor’s `balance_currency` at the time of
   * the transaction.
   */
  balance_fee_refund?: string;
  /**
   * The total amount returned to the customer as a result of this refund, in the vendor’s
   * `balance_currency` at the time of the transaction.
   */
  balance_gross_refund?: string;
  /**
   * The amount of tax returned to the customer, in the vendor’s `balance_currency` at the
   * time of the transaction.
   */
  balance_tax_refund?: string;

  /**
   * The amount of revenue taken from the vendor’s earnings as a result of this refund, in the
   * currency of the original transaction. It returns a positive or negative value. E.g: if
   * you issue a VAT-only refund, this will increase the vendor’s earnings instead of
   * decreasing it, to reflect this we use a negative value. Please also note that if the
   * earnings of the order being refunded are being split between vendors, the earnings
   * decrease amount will not include the other vendor’s fee, only yours: for example if you
   * are giving 15% of your earnings to another vendor and keeping 85%, your balance earnings
   * will only be reduced by 85%.
   */
  earnings_decrease?: string;


  /**
   * The fee amount returned to the vendor, in the currency of the original transaction.
   */
  fee_refund?: string;
  /**
   * The total amount returned to the customer as a result of this refund, in the currency of
   * the original transaction.
   */
  gross_refund?: string;
  /**
   * The value of this field `0` or `1` indicates whether it is the customer’s first payment
   * for this subscription.
   */
  initial_payment?: number;
  /**
   * Number of payments made to date, starting from `1` for the customer's first payment.
   * Integer sent as string.
   */
  instalments?: string;
  /**
   * The Paddle Order ID for this payment. This can be used to look up the order within your
   * Seller Dashboard.
   */
  order_id?: string;

  /**
   * The number of products or subscription seats sold in the transaction.
   */
  quantity?: string;
  /**
   * Refund reason note.
   */
  refund_reason?: string;
  /**
   * The type of refund.
   */
  refund_type?: RefundType;

  /**
   * The unique ID of the subscription payment.
   */
  subscription_payment_id?: string;
  /**
   * The amount of tax returned to the customer, in the currency of the original transaction.
   */
  tax_refund?: string;
  /**
   * The price per unit of the subscription.
   */
  unit_price?: string;

}

/**
* The type of refund.
*/
export enum RefundType {
  Full = "full",
  Partial = "partial",
  Vat = "vat",
}

/**
* A list of possible values and their meanings can be found under [Event
* Statuses](/reference/platform-parameters/event-statuses).
*/
export enum Status {
  Active = "active",
  Deleted = "deleted",
  PastDue = "past_due",
  Paused = "paused",
  Trialing = "trialing",
}

/**
* The reason why the subscription was paused. For example, `delinquent` if the payment
* failed and the rule specified in the [recover
* settings](https://vendors.paddle.com/recover-settings) was to pause the subscription.
*/
export enum PausedReason {
  Delinquent = "delinquent",
  Voluntary = "voluntary",
}
